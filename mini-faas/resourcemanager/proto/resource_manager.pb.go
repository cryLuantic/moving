// Code generated by protoc-gen-gogo.
// source: resource_manager.proto
// DO NOT EDIT!

/*
Package resourcemanagerproto is a generated protocol buffer package.

It is generated from these files:
	resource_manager.proto

It has these top-level messages:
	ReserveNodeRequest
	ReserveNodeReply
	NodeDesc
	ReleaseNodeRequest
	ReleaseNodeReply
	GetNodesUsageRequest
	GetNodesUsageReply
*/
package resourcemanagerproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ReserveNodeRequest struct {
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (m *ReserveNodeRequest) Reset()         { *m = ReserveNodeRequest{} }
func (m *ReserveNodeRequest) String() string { return proto.CompactTextString(m) }
func (*ReserveNodeRequest) ProtoMessage()    {}
func (*ReserveNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorResourceManager, []int{0}
}

func (m *ReserveNodeRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ReserveNodeRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type ReserveNodeReply struct {
	Node *NodeDesc `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *ReserveNodeReply) Reset()                    { *m = ReserveNodeReply{} }
func (m *ReserveNodeReply) String() string            { return proto.CompactTextString(m) }
func (*ReserveNodeReply) ProtoMessage()               {}
func (*ReserveNodeReply) Descriptor() ([]byte, []int) { return fileDescriptorResourceManager, []int{1} }

func (m *ReserveNodeReply) GetNode() *NodeDesc {
	if m != nil {
		return m.Node
	}
	return nil
}

type NodeDesc struct {
	Id                      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address                 string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	NodeServicePort         int64  `protobuf:"varint,3,opt,name=node_service_port,json=nodeServicePort,proto3" json:"node_service_port,omitempty"`
	MemoryInBytes           int64  `protobuf:"varint,4,opt,name=memory_in_bytes,json=memoryInBytes,proto3" json:"memory_in_bytes,omitempty"`
	ReservedTimeTimestampMs int64  `protobuf:"varint,5,opt,name=reserved_time_timestamp_ms,json=reservedTimeTimestampMs,proto3" json:"reserved_time_timestamp_ms,omitempty"`
	ReleasedTimeTimestampMs int64  `protobuf:"varint,6,opt,name=released_time_timestamp_ms,json=releasedTimeTimestampMs,proto3" json:"released_time_timestamp_ms,omitempty"`
}

func (m *NodeDesc) Reset()                    { *m = NodeDesc{} }
func (m *NodeDesc) String() string            { return proto.CompactTextString(m) }
func (*NodeDesc) ProtoMessage()               {}
func (*NodeDesc) Descriptor() ([]byte, []int) { return fileDescriptorResourceManager, []int{2} }

func (m *NodeDesc) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeDesc) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NodeDesc) GetNodeServicePort() int64 {
	if m != nil {
		return m.NodeServicePort
	}
	return 0
}

func (m *NodeDesc) GetMemoryInBytes() int64 {
	if m != nil {
		return m.MemoryInBytes
	}
	return 0
}

func (m *NodeDesc) GetReservedTimeTimestampMs() int64 {
	if m != nil {
		return m.ReservedTimeTimestampMs
	}
	return 0
}

func (m *NodeDesc) GetReleasedTimeTimestampMs() int64 {
	if m != nil {
		return m.ReleasedTimeTimestampMs
	}
	return 0
}

type ReleaseNodeRequest struct {
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ReleaseNodeRequest) Reset()         { *m = ReleaseNodeRequest{} }
func (m *ReleaseNodeRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseNodeRequest) ProtoMessage()    {}
func (*ReleaseNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorResourceManager, []int{3}
}

func (m *ReleaseNodeRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ReleaseNodeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReleaseNodeReply struct {
}

func (m *ReleaseNodeReply) Reset()                    { *m = ReleaseNodeReply{} }
func (m *ReleaseNodeReply) String() string            { return proto.CompactTextString(m) }
func (*ReleaseNodeReply) ProtoMessage()               {}
func (*ReleaseNodeReply) Descriptor() ([]byte, []int) { return fileDescriptorResourceManager, []int{4} }

type GetNodesUsageRequest struct {
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *GetNodesUsageRequest) Reset()         { *m = GetNodesUsageRequest{} }
func (m *GetNodesUsageRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodesUsageRequest) ProtoMessage()    {}
func (*GetNodesUsageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorResourceManager, []int{5}
}

func (m *GetNodesUsageRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type GetNodesUsageReply struct {
	Nodes []*NodeDesc `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *GetNodesUsageReply) Reset()         { *m = GetNodesUsageReply{} }
func (m *GetNodesUsageReply) String() string { return proto.CompactTextString(m) }
func (*GetNodesUsageReply) ProtoMessage()    {}
func (*GetNodesUsageReply) Descriptor() ([]byte, []int) {
	return fileDescriptorResourceManager, []int{6}
}

func (m *GetNodesUsageReply) GetNodes() []*NodeDesc {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*ReserveNodeRequest)(nil), "resourcemanagerproto.ReserveNodeRequest")
	proto.RegisterType((*ReserveNodeReply)(nil), "resourcemanagerproto.ReserveNodeReply")
	proto.RegisterType((*NodeDesc)(nil), "resourcemanagerproto.NodeDesc")
	proto.RegisterType((*ReleaseNodeRequest)(nil), "resourcemanagerproto.ReleaseNodeRequest")
	proto.RegisterType((*ReleaseNodeReply)(nil), "resourcemanagerproto.ReleaseNodeReply")
	proto.RegisterType((*GetNodesUsageRequest)(nil), "resourcemanagerproto.GetNodesUsageRequest")
	proto.RegisterType((*GetNodesUsageReply)(nil), "resourcemanagerproto.GetNodesUsageReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ResourceManager service

type ResourceManagerClient interface {
	ReserveNode(ctx context.Context, in *ReserveNodeRequest, opts ...grpc.CallOption) (*ReserveNodeReply, error)
	ReleaseNode(ctx context.Context, in *ReleaseNodeRequest, opts ...grpc.CallOption) (*ReleaseNodeReply, error)
	GetNodesUsage(ctx context.Context, in *GetNodesUsageRequest, opts ...grpc.CallOption) (*GetNodesUsageReply, error)
}

type resourceManagerClient struct {
	cc *grpc.ClientConn
}

func NewResourceManagerClient(cc *grpc.ClientConn) ResourceManagerClient {
	return &resourceManagerClient{cc}
}

func (c *resourceManagerClient) ReserveNode(ctx context.Context, in *ReserveNodeRequest, opts ...grpc.CallOption) (*ReserveNodeReply, error) {
	out := new(ReserveNodeReply)
	err := grpc.Invoke(ctx, "/resourcemanagerproto.ResourceManager/ReserveNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ReleaseNode(ctx context.Context, in *ReleaseNodeRequest, opts ...grpc.CallOption) (*ReleaseNodeReply, error) {
	out := new(ReleaseNodeReply)
	err := grpc.Invoke(ctx, "/resourcemanagerproto.ResourceManager/ReleaseNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetNodesUsage(ctx context.Context, in *GetNodesUsageRequest, opts ...grpc.CallOption) (*GetNodesUsageReply, error) {
	out := new(GetNodesUsageReply)
	err := grpc.Invoke(ctx, "/resourcemanagerproto.ResourceManager/GetNodesUsage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResourceManager service

type ResourceManagerServer interface {
	ReserveNode(context.Context, *ReserveNodeRequest) (*ReserveNodeReply, error)
	ReleaseNode(context.Context, *ReleaseNodeRequest) (*ReleaseNodeReply, error)
	GetNodesUsage(context.Context, *GetNodesUsageRequest) (*GetNodesUsageReply, error)
}

func RegisterResourceManagerServer(s *grpc.Server, srv ResourceManagerServer) {
	s.RegisterService(&_ResourceManager_serviceDesc, srv)
}

func _ResourceManager_ReserveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ReserveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanagerproto.ResourceManager/ReserveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ReserveNode(ctx, req.(*ReserveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ReleaseNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ReleaseNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanagerproto.ResourceManager/ReleaseNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ReleaseNode(ctx, req.(*ReleaseNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetNodesUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetNodesUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanagerproto.ResourceManager/GetNodesUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetNodesUsage(ctx, req.(*GetNodesUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resourcemanagerproto.ResourceManager",
	HandlerType: (*ResourceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReserveNode",
			Handler:    _ResourceManager_ReserveNode_Handler,
		},
		{
			MethodName: "ReleaseNode",
			Handler:    _ResourceManager_ReleaseNode_Handler,
		},
		{
			MethodName: "GetNodesUsage",
			Handler:    _ResourceManager_GetNodesUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_manager.proto",
}

func init() { proto.RegisterFile("resource_manager.proto", fileDescriptorResourceManager) }

var fileDescriptorResourceManager = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcf, 0xeb, 0xd3, 0x30,
	0x14, 0xff, 0xb6, 0xfb, 0xa1, 0x7b, 0x63, 0x4e, 0xc3, 0xd0, 0x32, 0x50, 0x46, 0x0f, 0xa3, 0xec,
	0xb0, 0xc3, 0xd4, 0x93, 0x37, 0x15, 0x65, 0xc2, 0x44, 0xea, 0x3c, 0x87, 0xac, 0x79, 0x8c, 0xc2,
	0xda, 0xd4, 0x24, 0x13, 0x7a, 0xf5, 0x2f, 0xf3, 0x4f, 0x93, 0x24, 0xed, 0xd8, 0x6a, 0x07, 0xf5,
	0x52, 0x9a, 0xcf, 0x8f, 0xf7, 0x5e, 0x3e, 0x2f, 0xf0, 0x5c, 0xa2, 0x12, 0x67, 0x99, 0x20, 0xcd,
	0x58, 0xce, 0x8e, 0x28, 0xd7, 0x85, 0x14, 0x5a, 0x90, 0x59, 0x8d, 0x57, 0xb0, 0x45, 0xc3, 0x18,
	0x48, 0x8c, 0x0a, 0xe5, 0x2f, 0xfc, 0x2a, 0x38, 0xc6, 0xf8, 0xf3, 0x8c, 0x4a, 0x93, 0x97, 0x00,
	0xd2, 0xfd, 0xd2, 0x94, 0x07, 0xde, 0xc2, 0x8b, 0x46, 0xf1, 0xa8, 0x42, 0xb6, 0xdc, 0xd0, 0x2c,
	0x49, 0xc4, 0x39, 0xb7, 0xb4, 0xef, 0xe8, 0x0a, 0xd9, 0xf2, 0xf0, 0x13, 0x3c, 0xbd, 0xa9, 0x59,
	0x9c, 0x4a, 0xb2, 0x81, 0x7e, 0x2e, 0x38, 0xda, 0x5a, 0xe3, 0xcd, 0xab, 0x75, 0xdb, 0x30, 0x6b,
	0x23, 0xff, 0x88, 0x2a, 0x89, 0xad, 0x36, 0xfc, 0xed, 0xc3, 0xe3, 0x1a, 0x22, 0x4f, 0xc0, 0xbf,
	0x8c, 0xe2, 0xa7, 0x9c, 0x04, 0xf0, 0x88, 0x71, 0x2e, 0x51, 0xa9, 0x6a, 0x80, 0xfa, 0x48, 0x56,
	0xf0, 0xcc, 0xd8, 0xa9, 0x99, 0x20, 0x4d, 0x90, 0x16, 0x42, 0xea, 0xa0, 0xb7, 0xf0, 0xa2, 0x5e,
	0x3c, 0x35, 0xc4, 0x77, 0x87, 0x7f, 0x13, 0x52, 0x93, 0x25, 0x4c, 0x33, 0xcc, 0x84, 0x2c, 0x69,
	0x9a, 0xd3, 0x43, 0xa9, 0x51, 0x05, 0x7d, 0xab, 0x9c, 0x38, 0x78, 0x9b, 0xbf, 0x37, 0x20, 0x79,
	0x07, 0x73, 0xe9, 0xae, 0xc4, 0xa9, 0x4e, 0x33, 0xb4, 0x1f, 0xa5, 0x59, 0x56, 0xd0, 0x4c, 0x05,
	0x03, 0x6b, 0x79, 0x51, 0x2b, 0xf6, 0x69, 0x86, 0xfb, 0x9a, 0xdf, 0x55, 0xe6, 0x13, 0x32, 0xd5,
	0x6a, 0x1e, 0xd6, 0x66, 0xa7, 0x68, 0x98, 0xc3, 0x0f, 0x66, 0x41, 0x96, 0xfa, 0x8f, 0x05, 0xb9,
	0xb0, 0xfc, 0x3a, 0xac, 0x90, 0x98, 0x8d, 0x5c, 0x15, 0x29, 0x4e, 0x65, 0xf8, 0x16, 0x66, 0x9f,
	0x51, 0x9b, 0xb3, 0xfa, 0xa1, 0xd8, 0xb1, 0x63, 0xe9, 0xf0, 0x0b, 0x90, 0x86, 0xcd, 0xac, 0xf7,
	0x0d, 0x0c, 0x4c, 0xb4, 0x2a, 0xf0, 0x16, 0xbd, 0x0e, 0xfb, 0x75, 0xe2, 0xcd, 0x1f, 0x1f, 0xa6,
	0x71, 0x25, 0xdc, 0x39, 0x21, 0x61, 0x30, 0xbe, 0x7a, 0x3c, 0x24, 0x6a, 0xaf, 0xf4, 0xef, 0x9b,
	0x9d, 0x2f, 0x3b, 0x28, 0xcd, 0xbd, 0x1f, 0x5c, 0x8b, 0x4b, 0x1a, 0xf7, 0x5b, 0x34, 0x53, 0xbf,
	0xdf, 0xa2, 0x11, 0xed, 0x03, 0x39, 0xc2, 0xe4, 0x26, 0x25, 0xb2, 0x6a, 0xb7, 0xb6, 0x6d, 0x60,
	0x1e, 0x75, 0xd2, 0xda, 0x46, 0x87, 0xa1, 0xe5, 0x5e, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x0b,
	0x32, 0xcc, 0x60, 0xf6, 0x03, 0x00, 0x00,
}
